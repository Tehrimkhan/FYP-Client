{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useState } from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport ImageViewer from \"./imageViewer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar imagePicker = function imagePicker() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedImage = _useState2[0],\n    setSelectedImage = _useState2[1];\n  var pickImageAsync = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        allowsEditing: true,\n        quality: 1\n      });\n      if (!result.canceled) {\n        setSelectedImage(result.assets[0].uri);\n      } else {\n        alert(\"You did not select any image.\");\n      }\n    });\n    return function pickImageAsync() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"imagePicker\"\n    }), _jsx(ImageViewer, {\n      placeholderImageSource: PlaceholderImage,\n      selectedImage: selectedImage\n    }), _jsx(TouchableOpacity, {\n      style: styles.buttonContainer,\n      onPress: function onPress() {\n        return pickImageAsync();\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Choose Image From Gallery\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    backgroundColor: \"black\",\n    padding: 10,\n    width: 250\n  },\n  buttonText: {\n    fontWeight: \"bold\",\n    color: \"white\"\n  },\n  imageArea: {\n    width: 200,\n    height: 200\n  }\n});\nexport default imagePicker;","map":{"version":3,"names":["React","useState","ImagePicker","ImageViewer","jsx","_jsx","jsxs","_jsxs","imagePicker","_useState","_useState2","_slicedToArray","selectedImage","setSelectedImage","pickImageAsync","_ref","_asyncToGenerator","result","launchImageLibraryAsync","allowsEditing","quality","canceled","assets","uri","alert","apply","arguments","View","children","Text","placeholderImageSource","PlaceholderImage","TouchableOpacity","style","styles","buttonContainer","onPress","buttonText","StyleSheet","create","backgroundColor","padding","width","fontWeight","color","imageArea","height"],"sources":["G:/Tehreem/Documents/Flex-Share/Flex-Share/client/src/Component/imagePicker.js"],"sourcesContent":["import { StyleSheet, Text, TouchableOpacity, View, Image } from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport ImageViewer from \"./imageViewer\";\r\n\r\nconst imagePicker = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const pickImageAsync = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      allowsEditing: true,\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.canceled) {\r\n      setSelectedImage(result.assets[0].uri);\r\n    } else {\r\n      alert(\"You did not select any image.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text>imagePicker</Text>\r\n      <ImageViewer\r\n        placeholderImageSource={PlaceholderImage}\r\n        selectedImage={selectedImage}\r\n      />\r\n      <TouchableOpacity\r\n        style={styles.buttonContainer}\r\n        onPress={() => pickImageAsync()}\r\n      >\r\n        <Text style={styles.buttonText}>Choose Image From Gallery</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  buttonContainer: {\r\n    backgroundColor: \"black\",\r\n    padding: 10,\r\n    width: 250,\r\n  },\r\n  buttonText: {\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n  },\r\n  imageArea: {\r\n    width: 200, // Set the width to an appropriate value\r\n    height: 200, // Set the height to an appropriate value\r\n  },\r\n});\r\n\r\nexport default imagePicker;\r\n"],"mappings":";;;;;;;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAChD,OAAOC,WAAW;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EACxB,IAAAC,SAAA,GAA0CR,QAAQ,CAAC,IAAI,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjDG,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EACtC,IAAMI,cAAc;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MACjC,IAAIC,MAAM,SAASf,WAAW,CAACgB,uBAAuB,CAAC;QACrDC,aAAa,EAAE,IAAI;QACnBC,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,IAAI,CAACH,MAAM,CAACI,QAAQ,EAAE;QACpBR,gBAAgB,CAACI,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC;MACxC,CAAC,MAAM;QACLC,KAAK,CAAC,+BAA+B,CAAC;MACxC;IACF,CAAC;IAAA,gBAXKV,cAAcA,CAAA;MAAA,OAAAC,IAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;EAAA,GAWnB;EAED,OACEnB,KAAA,CAACoB,IAAI;IAAAC,QAAA,GACHvB,IAAA,CAACwB,IAAI;MAAAD,QAAA,EAAC;IAAW,CAAM,CAAC,EACxBvB,IAAA,CAACF,WAAW;MACV2B,sBAAsB,EAAEC,gBAAiB;MACzCnB,aAAa,EAAEA;IAAc,CAC9B,CAAC,EACFP,IAAA,CAAC2B,gBAAgB;MACfC,KAAK,EAAEC,MAAM,CAACC,eAAgB;MAC9BC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAMtB,cAAc,CAAC,CAAC;MAAA,CAAC;MAAAc,QAAA,EAEhCvB,IAAA,CAACwB,IAAI;QAACI,KAAK,EAAEC,MAAM,CAACG,UAAW;QAAAT,QAAA,EAAC;MAAyB,CAAM;IAAC,CAChD,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,IAAMM,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,eAAe,EAAE;IACfK,eAAe,EAAE,OAAO;IACxBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE;EACT,CAAC;EACDL,UAAU,EAAE;IACVM,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAE;EACT,CAAC;EACDC,SAAS,EAAE;IACTH,KAAK,EAAE,GAAG;IACVI,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,eAAetC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}